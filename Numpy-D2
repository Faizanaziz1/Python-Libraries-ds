#arithmetic

#scalar arithmetic

array = np.array([1,2,3])

print(array + 1)
print(array -2)
print(array *3)
print(array/ 4)
print(array ** 5)

# vectorized math funcs

array = np.array([1,2,3])

print(np.sqrt(array))

array = np.array([1.05,2.33,4.69])
print(np.round(array)) #floor down - ceil  up
print(np.pi)

#excercise

radii = np.array([1,2,3])

print(np.pi * radii ** 2)

# element-wise arithmetic

array1= np.array([1,2,3])
array2= np.array([4,5,6])

print(array1 + array2)
print(array1 - array2)
print(array1 * array2)
print(array1 / array2)
print(array1 ** array2)

#comparison operators

scores = np.array([91, 55, 100, 73, 82,  64])

print(scores == 100)
print(scores >=60)

scores[scores < 60] = 0
print(scores)

#broadcasting

#it allows numpy to perform operations on arrays 
#with different shapes by virtually expanding dimensions
#so they match larger arrays' shape

#dimensions should either match or one of them has to be 1

array1= np.array([[1,2,3,4]])
array2 = np.array([[1], [2], [3], [4]])

print(array1.shape)
print(array2.shape)

print( array1 * array2)

#aggregate functions

#summarize data and typically return a single value

array = np.array ([[1,2,3,4,5],
                   [6,7,8,9,10]])
print(np.sum(array))
print(np.mean(array))
print(np.std(array))
print(np.var(array))

print(np.min(array))
print(np.max(array))

print(np.argmin(array))
print(np.argmax(array))

print(np.sum(array, axis=0)) #sum columns
print(np.sum(array, axis=1)) #sum rows

#filtering

ages = np.array([[21,17,20,14,19,20,65],
                 [39,22,99,15,19,20,21]])

teenagers = ages[ages < 18] #boolean indexing
print(teenagers)

adults = ages[(ages >=18) & (ages<65)]
print(adults)

adults = np.where (ages>=18, ages, 0)
print(adults) #prints all ages above 18 and makes everything else 0


